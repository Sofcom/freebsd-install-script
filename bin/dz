#!/bin/sh

######################################################################
# Script version is YYmmdd-HHMM in UTC, date +%y%m%d-%H%M%S
######################################################################
SCRIPTVERSION=141123-192714

: ${pool:=tank}
: ${raidtype:=stripe}
: ${mnt:=/z}

######################################################################
# Usage
######################################################################

usage() {
  cat <<EOF
usage: $0 -i -d disk [-d disk ...] [-p poolname]
       $0 -i -e disk -d disk [-p poolname]
       $0 -u -d disk [-d disk ...] [-p poolname]
       $0 -l [-p poolname]

       -d disk  Disk to install on (eg. da0).
       -e disk  Attach to this existing disk that is part of -p pool.
       -h       Help.
       -i       Initialize.
       -l       Lock.
       -M mount Mountpoint prefix, if not using /z/\$poolname.
       -p name  ZFS pool name, must be unique.
       -r       Select ZFS raid mode if multiple -d given.
       -u       Unlock.
       -v       Version.
EOF
}

exiterror() {
  echo "ERROR: Exit code $1"
  exit $1
}

######################################################################
# Options parsing
# modified from https://github.com/mmatuska/mfsbsd
######################################################################

while getopts d:e:p:r:M:iulvh o; do
  case "$o" in
    d) disks="$disks ${OPTARG##/dev/}" ;;
    e) edisk="$OPTARG" ; ADDTOPOOL=1 ;;
    i) INIT=1 ;;
    p) rpool="$OPTARG" ; bpool="boot${rpool}" ;;
    r) raidtype="$OPTARG" ;;
    l) LOCK=1 ;;
    M) mnt="$OPTARG" ;;
    u) UNLOCK=1 ;;
    v) echo $SCRIPTVERSION ; exit 1 ;;
    h) usage; exit 1 ;;
    [?]) usage; exit 1 ;;
  esac
done

if [ "$INIT" -a "$LOCK" ]; then
  echo "Only pass -i or -l, not both."
  exit 1
elif [ "$LOCK" -a "$UNLOCK" ]; then
  echo "Only pass -l or -u, not both."
  exit 1
elif [ "$UNLOCK" -a "$INIT" ]; then
  echo "Only pass -u or -i, not both."
  exit 1
fi

######################################################################
# Disk parsing for testing raid type
# modified from https://github.com/mmatuska/mfsbsd
######################################################################

if [ -z "$ADDTOPOOL" -o "$ADDTOPOOL" = "0" ]; then
  count=$( echo "$disks" | wc -w | awk '{ print $1 }' )
  if [ "$count" -lt "3" -a "$raidtype" = "raidz" ]; then
    echo "Error: raidz needs at least three devices (-d switch)" ; exit 1
  elif [ "$count" -lt "4" -a "$raidtype" = "raidz2" ]; then
    echo "Error: raidz2 needs at least four devices (-d switch)" ; exit 1
  elif [ "$count" -lt "5" -a "$raidtype" = "raidz3" ]; then
    echo "Error: raidz3 needs at least five devices (-d switch)" ; exit 1
  elif [ "$count" = "1" -a "$raidtype" = "mirror" ]; then
    echo "Error: mirror needs at least two devices (-d switch)" ; exit 1
  elif [ "$count" = "2" -a "$raidtype" != "mirror" ]; then
    echo "Notice: two drives selected, automatically choosing mirror mode"
    raidtype="mirror"
  elif [ "$count" -gt "2" -a "$raidtype" != "mirror" -a "$raidtype" != "raidz" \
    -a "$raidtype" != "raidz2" -a "$raidtype" != "raidz3" ]; then
    echo \
    "Error: please choose raid mode with the -r switch (mirror or raidz{1,2,3})"
    exit 1
  fi
fi

######################################################################
# Quit if pools exist, but if ADDTOPOOL, quit if not exist
######################################################################

if [ -z "$ADDTOPOOL" -o "$ADDTOPOOL" = "0" ]; then
  if zpool status $rpool >/dev/null 2>&1 ; then
    echo "ERROR: A pool named $rpool already exists."
    exit 1
  fi
  if zpool status $bpool >/dev/null 2>&1 ; then
    echo "ERROR: A pool named $bpool already exists."
    exit 1
  fi
elif [ "$ADDTOPOOL" = "1" ]; then
  if ! zpool status $rpool >/dev/null 2>&1 ; then
    echo "ERROR: A pool named $rpool doesn't exists."
    exit 1
  fi
  if ! zpool status $bpool >/dev/null 2>&1 ; then
    echo "ERROR: A pool named $bpool doesn't exists."
    exit 1
  fi
fi
