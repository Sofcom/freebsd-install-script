#!/bin/sh

# $FreeBSD$
# PROVIDE: keygeli
# REQUIRE: FILESYSTEMS NETWORKING SERVERS DAEMON LOGIN
# BEFORE: sshd iocage

# Add the following lines to /etc/rc.conf.local or /etc/rc.conf to enable this:
#
# keygeli_enable="YES"
#
# If you use a USB key with ZFS, the zpool name can be set with
#
# keygeli_zpool="key"
#
# If you use ssh keyservers:
#
# keygeli_ssh="one two three"
# keygeli_ssh_flags="-F $keygeli_ssh_config -o UserKnownHostsFile=/etc/keygeli/known_hosts -i /etc/keygeli/id_rsa"

. /etc/rc.subr

: ${keygeli_enable:="NO"}
: ${keygeli_export:="YES"}
: ${keygeli_tmpfsdir:="/tmp/tmpfs"}
: ${keygeli_file:=keygeli_$(hostname -s).smime}
: ${keygeli_key:="/etc/keygeli/key.pem"}
: ${keygeli_cert:="/etc/keygeli/cert.pem"}

name="keygeli"
rcvar=keygeli_enable
start_cmd="keygeli_run"
stop_cmd=":"
exfile=/etc/exports

getip()
{
    query=$1
    ping -c 1 ${query} | grep PING | awk '{print $3}' | tr -d '[):(]'
}

restoreexports()
{
    if [ -e ${exfile} -a -e ${exfile}.orig ]; then
        sleep 120
        cp -a ${exfile}.orig ${exfile}
    fi
}

ipexports()
{
    if [       -e ${exfile} ]; then
        if [ ! -e ${exfile}.orig ]; then
            cp -a ${exfile} ${exfile}.orig
        fi
        for i in $( cat ${exfile} | grep '\.local' | awk '{print $NF}' | sort -u ); do
            resolvedip=$( getip $i )
            sed -i '' "s;$i;$resolvedip;g" ${exfile}
        done
        service mountd restart
        restoreexports &
    fi
}

keygeli_run()
{

    # restrictive mask for new files
    umask 077

    # mount tmpfs to keep the passfile in ram
    mkdir -p $keygeli_tmpfsdir
    chmod 700 $keygeli_tmpfsdir
    mount -t tmpfs tmpfs $keygeli_tmpfsdir
    if ! mount | grep 'tmpfs on /tmp/tmpfs (tmpfs' >/dev/null 2>&1 ; then
        exit 1
    fi

    # Fetch keygeli_hostname.smime from usb key zpool or ssh
    if [ -n "$keygeli_zpool" ]; then
        if ! zpool list ${keygeli_zpool} >/dev/null 2>&1 ; then
            # if not already exist, import the pool on the USB thumbdrive
            zpool import ${keygeli_zpool_import_flags} ${keygeli_zpool}
        fi
        if zfs list -H -o mountpoint $keygeli_zpool >/dev/null 2>&1 ; then
            keygeli_zpool_mountpoint=$( zfs list -H -o mountpoint $keygeli_zpool )
            if [ -e ${keygeli_zpool_mountpoint}/${keygeli_file} ]; then
                # copy to standard location in tmpfs
                cat ${keygeli_zpool_mountpoint}/${keygeli_file} > ${keygeli_tmpfsdir}/${keygeli_file}
            fi
        fi
    fi
    if [ -n "$keygeli_ssh" ]; then
        for i in $keygeli_ssh ; do
            if [ ! -e ${keygeli_tmpfsdir}/${keygeli_file} ]; then
                # copy to standard location in tmpfs
                if ! ssh $keygeli_ssh_flags $i keygeli get > ${keygeli_tmpfsdir}/${keygeli_file} ; then
                    if [ -e ${keygeli_tmpfsdir}/${keygeli_file} ]; then
                        # exit code != 0, so this shouldn't exist
                        rm ${keygeli_tmpfsdir}/${keygeli_file}
                    fi
                    sleep 5
                fi
            fi
        done
    fi

    # Verify, then Decrypt then verify
    if [ -e ${keygeli_tmpfsdir}/${keygeli_file} ]; then
        # Verify package was for self
        if ! openssl smime -verify -CAfile $keygeli_cert -certfile $keygeli_cert \
                -in ${keygeli_tmpfsdir}/${keygeli_file} >/dev/null 2>/dev/null ; then
            echo "Verification of ${keygeli_tmpfsdir}/${keygeli_file} failed."
            exit 1
        fi
        openssl smime -verify -CAfile $keygeli_cert -certfile $keygeli_cert \
            -in ${keygeli_tmpfsdir}/${keygeli_file} 2>/dev/null \
                | openssl smime -decrypt -binary -nointern -recip $keygeli_cert -inkey $keygeli_key \
                | openssl smime -verify -CAfile $keygeli_cert -certfile $keygeli_cert \
                    -out ${keygeli_tmpfsdir}/geli_password.txt 2>/dev/null
        chmod 600 ${keygeli_tmpfsdir}/geli_password.txt
    fi

    # geli flags should be configured in rc.conf
    service geli start
    service geli2 start

    # unmount tmpfs so we get rid of the memory
    umount -f $keygeli_tmpfsdir

    if [ -n "$keygeli_zpool" ]; then
        if checkyesno keygeli_export && zpool list ${keygeli_zpool} >/dev/null 2>&1 ; then
            # export the pool on the USB thumbdrive
            zpool export ${keygeli_zpool}
        fi
    fi

    # zfs start to mount
    service zfs start

    # restart nfsd and mountd
    service nfsd restart
    ipexports

}

load_rc_config $name
run_rc_command "$1"
